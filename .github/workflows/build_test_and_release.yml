name: Test, Build & Release
on: push

permissions:
  contents: read

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  install:
    timeout-minutes: 60
    name: üîç Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          submodules: true
      - uses: actions/setup-node@v4
        with:
          node-version: "21.2.0"
          cache: "npm"
      - uses: actions/checkout@v3

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
 
      - name: Cache Playwright binaries
        uses: actions/cache@v4
        id: cache-playwright
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}
 
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
 
      - name: Install Playwright Browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install system dependencies for WebKit
        if: steps.cache-playwright.outputs.cache-hit == 'true'
        run: npx playwright install-deps webkit

      - name: Get AK submodule for the frontend
        run: git submodule update --init

  test:
    name: üß™ Test (${{ matrix.shard }}/${{ strategy.job-total }})
    needs: install
    strategy:
      fail-fast: false  
      matrix:
        shard: [1, 2, 3, 4]
    runs-on: ubuntu-latest
    if: ${{ ! contains(github.event.head_commit.message, '[skip_e2e]') }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: "21.2.0"
          cache: "npm"
 
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
 
      - name: Cache Playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}
      
      - name: Install system dependencies for WebKit
        run: npx playwright install-deps webkit

      - name: Download autokitteh executable
        run: |
          curl -sSL https://get.autokitteh.sh | bash

      - name: Run autokitteh
        env:
          AK_AUTHHTTMIDDLEWARE__REQUIRED: "false"
          AK_AUTHLOGINHTTPSVC__DESCOPE__ENABLED: "false"
          AK_AUTHLOGINHTTPSVC__ALLOWED_LOGINS: "*"
          AK_HTTP__CORS__ALLOWED_ORIGINS: "http://localhost:4173"
          AK_AUTHSESSIONS__ALLOWED_CORS_COOKIE: "true"
          AK_AUTHSESSIONS__ALLOWED_DOMAIN: "localhost:4173"
        run: |
          ak up --mode=dev &

      - name: Wait for Backend to Start
        run: |
          URL=http://localhost:9980
          echo "Waiting for backend to start..." 
          until $(curl --output /dev/null --silent --head --fail -X POST $URL); do
            printf '.'
            sleep 5
          done
          echo "Backend is up!"

      - name: Run Playwright tests
        run: npx playwright test --shard=${{ matrix.shard }}/${{ strategy.job-total }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.shard }}_${{ strategy.job-total }}
          path: playwright-report/
          retention-days: 30

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: "21.2.0"
          cache: "npm"

      - name: Pull submodule from remote
        run: git submodule update --remote

      - name: Install dependencies
        run: npm ci

      - name: Run code TS validation
        run: npm run type-check

      - name: Run code ESLint validation
        run: npm run lint

      - name: Run code linter check
        run: npm run lint

      - name: Run build
        run: npm run build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-files
          path: |
            ./dist

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: "21.2.0"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - uses: actions/download-artifact@v4
        with:
          name: built-files

      - name: Release and tag a new version
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: npx semantic-release
