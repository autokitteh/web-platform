name: Test, Build & Release
on: push

permissions:
  contents: read

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  install:
    timeout-minutes: 5
    name: 🔍 Install
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip_e2e]') }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: "21.2.0"
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Cache Playwright binaries
        uses: actions/cache@v4
        id: cache-playwright
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install Playwright Browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
          
      - name: Update kittehub.zip
        run: |
          # Backup current kittehub.zip if it exists
          cp src/assets/templates/kittehub.zip src/assets/templates/kittehub.zip.backup>/dev/null || true
          
          # Check if dist.zip exists in the checked out kittehub
          if [ -f "temp-kittehub/dist.zip" ]; then
            cp temp-kittehub/dist.zip src/assets/templates/kittehub.zip
            echo "Successfully updated kittehub.zip"
          else
            echo "dist.zip not found in kittehub release branch, keeping current version"
            mv src/assets/templates/kittehub.zip.backup src/assets/templates/kittehub.zip>/dev/null || true
          fi
          
          # Cleanup
          rm -rf temp-kittehub
          rm -f src/assets/kittehub.zip.backup


  test:
      name: 🧪 Testing ${{ matrix.browser }}
      needs: install
      runs-on: ubuntu-latest
      timeout-minutes: 10
      strategy:
        matrix:
          browser: ["Chrome", "Edge", "Firefox", "Safari"]
        fail-fast: false
      
      steps:
        - uses: actions/checkout@v4
          with:
            token: ${{ secrets.PAT_TOKEN }}
            submodules: true

        - uses: actions/setup-node@v4
          with:
            node-version: ${{ env.NODE_VERSION }}
            cache: "npm"

        - name: Restore cached dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: node-modules-${{ hashFiles('package-lock.json') }}

        - name: Setup Playwright
          run: |
            npm install -D @playwright/test
            npx playwright install --with-deps

        # Backup Safari-specific step in case the composite action fails
        - name: Install system dependencies for Safari
          if: matrix.browser == 'Safari'
          run: |
            npx playwright install-deps webkit
            npx playwright install webkit

        - name: Restore Playwright browsers
          uses: actions/cache@v4
          with:
            path: ~/.cache/ms-playwright
            key: playwright-${{ hashFiles('package-lock.json') }}

        - name: Setup test environment
          uses: ./.github/actions/setup-test-env
          with:
            aws-role: ${{ secrets.AWS_GITHUB_ROLE }}
            descope-project-id: ${{ secrets.VITE_DESCOPE_PROJECT_ID }}
            browser: ${{ matrix.browser }}

        - name: Run Playwright tests
          env:
            TESTS_JWT_AUTH_TOKEN: ${{ secrets.TESTS_JWT_AUTH_TOKEN }}
          run: npx playwright test --project=${{ matrix.browser }}

        - name: Upload test artifacts
          if: always()
          uses: ./.github/actions/upload-test-artifacts
          with:
            browser: ${{ matrix.browser }}
            run-id: ${{ github.run_id }}
            
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          submodules: true

      - name: Checkout kittehub release
        uses: actions/checkout@v4
        with:
          repository: autokitteh/kittehub
          ref: release
          path: temp-kittehub
          token: ${{ secrets.PAT_TOKEN }}
          
      - name: Update kittehub.zip
        run: |
          # Backup current kittehub.zip if it exists
          cp src/assets/templates/kittehub.zip src/assets/templates/kittehub.zip.backup>/dev/null || true
          
          # Check if dist.zip exists in the checked out kittehub
          if [ -f "temp-kittehub/dist.zip" ]; then
            cp temp-kittehub/dist.zip src/assets/templates/kittehub.zip
            echo "Successfully updated kittehub.zip"
          else
            echo "dist.zip not found in kittehub release branch, keeping current version"
            mv src/assets/templates/kittehub.zip.backup src/assets/templates/kittehub.zip>/dev/null || true
          fi
          
          # Cleanup
          rm -rf temp-kittehub
          rm -f src/assets/kittehub.zip.backup

      - uses: actions/setup-node@v4
        with:
          node-version: "21.2.0"
          cache: "npm"

      - name: Pull submodule from remote
        run: git submodule update --remote

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compilation test
        run: npm run type-check

      - name: Run eslint
        run: "npm run lint:ci"

      - name: Run prettier
        run: "npm run prettier:ci"

      - name: Run build
        run: npm run build

      - name: Override .gitignore
        run: echo '!dist' >> .gitignore

      - name: Upload Built Files
        uses: actions/upload-artifact@v4
        with:
          name: built-files
          path: dist

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: "21.2.0"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - uses: actions/download-artifact@v4
        with:
          name: built-files
          path: ./dist

      - name: Create ZIP of the dist directory
        run: zip -r dist.zip dist

      - name: Calculate SHA256 hash of dist.zip
        run: |
          SHA256=$(sha256sum dist.zip | awk '{ print $1 }')
          echo "$SHA256" > dist.zip.sha256
          echo "SHA256=$SHA256" >> $GITHUB_ENV

      - name: Release and tag a new version
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          HUSKY: 0
        run: npx semantic-release