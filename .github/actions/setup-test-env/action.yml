name: "Setup Test Environment"
description: "Sets up the test environment including AWS credentials and Docker container"

inputs:
    aws-role:
        description: "AWS role to assume"
        required: true
    descope-project-id:
        description: "Descope project ID"
        required: true
    browser:
        description: "Browser to test"
        required: true

runs:
    using: "composite"
    steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
              role-to-assume: ${{ inputs.aws-role }}
              role-session-name: Github_Action_E2E_Tests_Autokitteh
              aws-region: us-east-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Start AutoKitteh container
          shell: bash
          env:
              DESCOPE_PROJECT_ID: ${{ inputs.descope-project-id }}
          run: |
              CONTAINER_ID=$(docker run -d \
                -p 9980:9980 \
                -e AK_AUTHHTTPMIDDLEWARE__USE_DEFAULT_USER="false" \
                -e AK_AUTHLOGINHTTPSVC__DESCOPE__ENABLED="true" \
                -e AK_HTTP__CORS__ALLOWED_ORIGINS="http://localhost:8000" \
                -e AK_AUTHSESSIONS__ALLOWED_CORS_COOKIE="true" \
                -e AK_AUTHLOGINHTTPSVC__DESCOPE__PROJECT_ID="$DESCOPE_PROJECT_ID" \
                -e AK_AUTHSESSIONS__COOKIE_KEYS="78d85f1c9fd9df7d3d459a75f1db315ef634dc854ba90bc5add3e6cb6f135bd6,d9591b1ab2d0e5de1fef96a5a8a50b883430884211f16a206f84ad57897f99d5" \
                -e AK_AUTHTOKENSJWT__SIGN_KEY="183b1c8f4c64b3450907b3859be0b94044d3c92a3116f02213585a85dd0cb154" \
                ${{ steps.login-ecr.outputs.registry }}/autokitteh:latest up --mode=dev --config db.seed_commands="insert into orgs(created_by, created_at, org_id, display_name, updated_by, updated_at) values('7bcbb000-0000-0000-0000-000000000000', '2025-01-06 09:47:45.348066+00:00', '01943b03-6344-702a-9471-1b0098752177', 'Tests''s Personal Org', '00000000-0000-0000-0000-000000000000', '2025-01-06 11:47:45.348369+02:00');insert into users(user_id, email, display_name, created_by, created_at, disabled, default_org_id, updated_by, updated_at,status) values('01943b03-6345-7606-8e13-e319ae2f1929', 'test@autokitteh.com', 'Ronen Mars', '7bcbb000-0000-0000-0000-000000000000', '2025-01-06 09:47:45.349399+00:00', 0, '01943b03-6344-702a-9471-1b0098752177', '00000000-0000-0000-0000-000000000000', '2025-01-06 11:47:45.349424+02:00',1);insert into org_members(created_by, created_at, org_id, user_id, status) values('00000000-0000-0000-0000-000000000000', '2025-01-06 11:47:45.350038+02:00', '01943b03-6344-702a-9471-1b0098752177', '01943b03-6345-7606-8e13-e319ae2f1929',1);)"
              echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV

        - name: Setup logging
          shell: bash
          run: |
              docker logs -f ${{ env.CONTAINER_ID }} > docker-logs.txt &
              echo "LOGS_PID=$!" >> $GITHUB_ENV

        - name: Wait for Backend
          shell: bash
          run: |
              URL=http://localhost:9980
              echo "Waiting for backend to start..."
              until $(curl --output /dev/null --silent --head --fail -X POST $URL); do
                printf '.'
                sleep 5
              done
              echo "Backend is up!"

        - name: Install browser-specific dependencies
          if: inputs.browser == 'Safari'
          shell: bash
          run: npx playwright install-deps webkit
