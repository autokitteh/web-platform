import { languages } from "monaco-editor";

export const pythonTokenizerConfig: languages.IMonarchLanguage = {
	defaultToken: "",
	tokenPostfix: ".python",
	keywords: [
		"and",
		"as",
		"assert",
		"break",
		"class",
		"continue",
		"def",
		"del",
		"elif",
		"else",
		"except",
		"exec",
		"finally",
		"for",
		"from",
		"global",
		"if",
		"import",
		"in",
		"is",
		"lambda",
		"not",
		"or",
		"pass",
		"print",
		"raise",
		"return",
		"try",
		"while",
		"with",
		"yield",
		"int",
		"float",
		"long",
		"complex",
		"hex",
		"abs",
		"all",
		"any",
		"apply",
		"basestring",
		"bin",
		"bool",
		"buffer",
		"bytearray",
		"callable",
		"chr",
		"classmethod",
		"cmp",
		"coerce",
		"compile",
		"delattr",
		"dict",
		"dir",
		"divmod",
		"enumerate",
		"eval",
		"execfile",
		"file",
		"filter",
		"format",
		"frozenset",
		"getattr",
		"globals",
		"hasattr",
		"hash",
		"help",
		"id",
		"input",
		"intern",
		"isinstance",
		"issubclass",
		"iter",
		"len",
		"list",
		"locals",
		"map",
		"max",
		"memoryview",
		"min",
		"next",
		"object",
		"oct",
		"open",
		"ord",
		"pow",
		"property",
		"range",
		"raw_input",
		"reduce",
		"reload",
		"repr",
		"reversed",
		"round",
		"set",
		"setattr",
		"slice",
		"sorted",
		"staticmethod",
		"str",
		"sum",
		"super",
		"tuple",
		"type",
		"unichr",
		"unicode",
		"vars",
		"xrange",
		"zip",
		"True",
		"False",
		"None",
		"NotImplemented",
		"Ellipsis",
		"__debug__",
		"quit",
		"exit",
		"copyright",
		"license",
		"credits",
	],
	brackets: [
		{ open: "{", close: "}", token: "delimiter.curly" },
		{ open: "[", close: "]", token: "delimiter.square" },
		{ open: "(", close: ")", token: "delimiter.parenthesis" },
	],
	tokenizer: {
		root: [
			{ include: "@whitespace" },
			{ include: "@numbers" },
			{ include: "@strings" },
			[/[,:;]/, "delimiter"],
			[/[{}[\]()]/, "@brackets"],
			[/@[a-zA-Z_]\w*/, "tag"],
			[/[a-zA-Z_]\w*/, { cases: { "@keywords": "keyword", "@default": "identifier" } }],
		],
		whitespace: [
			[/\s+/, "white"],
			[/(^#.*$)/, "comment"],
			[/'''/, "string", "@endDocString"],
			[/"""/, "string", "@endDblDocString"],
		],
		endDocString: [
			[/[^']+/, "string"],
			[/\\./, "string"],
			[/'''/, "string", "@popall"],
			[/'/, "string"],
		],
		endDblDocString: [
			[/[^"]+/, "string"],
			[/\\./, "string"],
			[/"""/, "string", "@popall"],
			[/"/, "string"],
		],
		strings: [
			[/f"""/, "string", "@fstring_triple"],
			[/f'''/, "string", "@fstring_triple_single"],
			[/f'([^'\\]|\\.)*$/, "string.invalid"],
			[/f'/, "string", "@fstring_single"],
			[/f"([^"\\]|\\.)*$/, "string.invalid"],
			[/f"/, "string", "@fstring_double"],
			[/'([^'\\]|\\.)*$/, "string.invalid"],
			[/'/, "string", "@string_single"],
			[/"([^"\\]|\\.)*$/, "string.invalid"],
			[/"/, "string", "@string_double"],
			[/"""/, "string", "@string_triple"],
			[/'''/, "string", "@string_triple_single"],
		],
		string_double: [
			[/[^\\"]+/, "string"],
			[/@escapes/, "string.escape"],
			[/\\./, "string.escape.invalid"],
			[/"/, "string", "@pop"],
		],
		string_single: [
			[/[^\\']+/, "string"],
			[/@escapes/, "string.escape"],
			[/\\./, "string.escape.invalid"],
			[/'/, "string", "@pop"],
		],
		string_triple: [
			[/[^"\\]+/, "string"],
			[/@escapes/, "string.escape"],
			[/\\./, "string.escape.invalid"],
			[/"""/, "string", "@pop"],
			[/"/, "string"],
		],
		string_triple_single: [
			[/[^'\\]+/, "string"],
			[/@escapes/, "string.escape"],
			[/\\./, "string.escape.invalid"],
			[/'''/, "string", "@pop"],
			[/'/, "string"],
		],
		fstring_double: [
			[/[^\\"{]+/, "string"],
			[/\{/, "string.escape", "@fstring_expression"],
			[/@escapes/, "string.escape"],
			[/\\./, "string.escape.invalid"],
			[/"/, "string", "@pop"],
		],
		fstring_single: [
			[/[^\\''{]+/, "string"],
			[/\{/, "string.escape", "@fstring_expression"],
			[/@escapes/, "string.escape"],
			[/\\./, "string.escape.invalid"],
			[/'/, "string", "@pop"],
		],
		fstring_triple: [
			[/[^"\\{]+/, "string"],
			[/\{/, "string.escape", "@fstring_expression"],
			[/@escapes/, "string.escape"],
			[/\\./, "string.escape.invalid"],
			[/"""/, "string", "@pop"],
			[/"/, "string"],
		],
		fstring_triple_single: [
			[/[^'\\{]+/, "string"],
			[/\{/, "string.escape", "@fstring_expression"],
			[/@escapes/, "string.escape"],
			[/\\./, "string.escape.invalid"],
			[/'''/, "string", "@pop"],
			[/'/, "string"],
		],
		fstring_expression: [
			[/[^}]+/, "identifier"],
			[/\}/, "string.escape", "@pop"],
		],
		numbers: [
			[/0[xX][0-9a-fA-F]*[lL]?/, "number.hex"],
			[/0[0-7]*[lL]?/, "number.octal"],
			[/0[bB][0-1]*[lL]?/, "number.binary"],
			[/[0-9]+[lL]?/, "number"],
			[/\d*\.\d+([eE][+-]?\d+)?[fFdD]?/, "number.float"],
			[/\d+[eE][+-]?\d+[fFdD]?/, "number.float"],
		],
	},
	escapes: /\\(?:[abfnrtv\\"]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
};
