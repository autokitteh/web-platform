{
	"actions": {
		"deleteProjectSuccessExtended": "Project deletion completed successfully, project name: {{projectName}}, project ID: {{projectId}}",
		"errorCreatingProject": "Failed to create project",
		"errorDuplicatingProject": "Failed to duplicate project",
		"errorDuplicatingProjectExtended": "Project duplication failed, error: {{error}}",
		"errorExportingProject": "Failed to export project",
		"projectContentError": "Project content error",
		"projectContentErrorExtended": "Project content error, error: {{error}}",
		"projectContentNotFound": "Project content not found",
		"projectCreatedSuccessfully": "Project created successfully",
		"projectCreatedSuccessfullyExtended": "Project created successfully, project template name: {{templateName}}, project ID: {{projectId}}",
		"projectCreationFailed": "Project creation failed",
		"projectCreationFailedExtended": "Project creation failed, error: {{error}}",
		"projectManifestExtractionFailedExtended": "Project manifest extraction failed, error: {{error}}",
		"projectManifestNotFoundInArchive": "Clear the cache and reload the page. Project manifest not found in the archive",
		"templateNotoundInTheResourcesExtended": "Template not found in the resources directory: {{templateAssetDirectory}}",
		"projectManifestNotFoundInArchiveExtended": "Project manifest not found in the archive: {{archiveName}}",
		"projectTemplateManifestNotFound": "Project template manifest not found",
		"templateNotFoundInTheResources": "Template not found in the resources",
		"templateNotFoundInTheResourcesExtended": "Template not found in the resources directory: {{templateAssetDirectory}}"
	},
	"projects": {
		"buttons": {
			"deleteProject": "Delete project",
			"exportProject": "Export project",
			"start": "Start",
			"startNewProject": "Start New Project",
			"stopDeployment": "Deactivate deployment"
		},
		"cards": {
			"community": {
				"desc": "See how our community is creating projects",
				"title": "JOIN THE COMMUNITY"
			}
		},
		"never": "-",
		"table": {
			"columns": {
				"actions": "Actions",
				"lastDeployed": "Last Deployed",
				"projectName": "Project Name",
				"sessions": "Sessions",
				"status": "Status",
				"totalDeployments": "Deployments"
			},
			"noProjectsFound": "No projects found",
			"sessionTypes": {
				"completed": "Completed",
				"error": "Error",
				"running": "Running",
				"stopped": "Stopped"
			}
		}
	},
	"templates": {
		"all": "All",
		"categories": "Categories",
		"integrations": "Integrations",
		"noCategoriesFound": "No categories found",
		"noIntegrationsFound": "No integrations found",
		"projectCreationFailedExtended": "Project creation failed, error: {{error}}",
		"projectTemplateManifestNotFound": "Project template manifest not found",
		"title": "Start From Template"
	},
	"topbar": {
		"buttons": {
			"ai": "AI",
			"import": "Import",
			"logout": "Logout",
			"newProject": "New Project",
			"openTemplates": "Open Templates"
		},
		"hello": "Hello",
		"logout": "Logout",
		"welcome": "Welcome to {{organization}}",
		"autoKitteh": "AutoKitteh"
	},
	"tours": {
		"projectCreationFailed": "Project creation failed",
		"projectCreationFailedExtended": "Project creation failed, error: {{error}}",
		"unknownError": "Unknown error",
		"errorOccurred": "An error occurred"
	},
	"welcome": {
		"cards": {
			"main": {
				"inAFewLinesOfCode": "Few Lines of Code",
				"meowWorld": "Quick Start",
				"reliableAutomation": "Reliable Automation",
				"startWithDemoProject": "Start With Demo Project"
			}
		},
		"getStarted": "Get started with Autokitteh",
		"howToBuildAnAutomation": "How to Build an Automation?",
		"news": "News",
		"tutorialVideo": "Tutotial video",
		"whatIsAutoKitteh": "What is AutoKitteh?"
	},
	"ai": {
		"title": "Build with AI",
		"welcomeTitle": "Welcome to AutoKitteh",
		"createNew": "Start",
		"creating": "Creating...",
		"createFromScratch": "Create from Scratch",
		"createFromScratchDesc": "Build a new automation project from the ground up",
		"createFromScratchButton": "Create New",
		"learnMore": "Learn More",
		"newProject": "Quick Tutorial",
		"newProjectDesc": "Deploy, execute, and review the output of a simple Python project",
		"useTemplate": "Start From Template",
		"useTemplateDesc": "Select from a collection of out of the box templates",
		"projectCreationFailed": "Project creation failed",
		"mainHeading": {
			"productionGrade": "Production-Grade Vibe Automation",
			"forTechnicalBuilders": "for Technical Builders"
		},
		"buildWorkflows": "Build workflows in plain English",
		"modal": {
			"closeLabel": "Close Modal",
			"assistantTitle": "AutoKitteh AI Assistant"
		},
		"examples": {
			"webhookSms": {
				"title": "Webhook to SMS (Twilio)",
				"text": "Create a Twilio-based system that sends SMS notifications when triggered by a webhook. Include the webhook data in the SMS message."
			},
			"uptimeMonitor": {
				"title": "Website Uptime Monitor",
				"text": "Monitor www.example.com every 10 minutes. Log all downtimes to Google Sheets. Send immediate Slack alerts on downtime and recovery. Send 12-hour summary reports with uptime stats in Slack."
			},
			"redditTracker": {
				"title": "Reddit Post Tracker",
				"text": "Monitor daily Reddit posts about \"Automation\". Summarize the post with chatGPT and send the results to a Slack channel. You decide on the topics on Reddit. Make sure you don't send me the same post twice. Also, store the posts and the links in google sheets"
			},
			"hackerNewsMonitor": {
				"title": "HackerNews Feed Monitor",
				"text": "Monitor daily hackernews posts about \"Automation\". Summarize the post and comments with chatGPT and send the results to a Slack channel. Make sure you don't send me the same post twice. Also, store the posts and the links in Google Sheet"
			},
			"hubspotContacts": {
				"title": "Send contacts from HubSpot",
				"text": "Triggered by a webhook, retrieve contacts added this week in HubSpot and send their information to a Slack channel"
			},
			"emailReply": {
				"title": "Email reply with AI",
				"text": "When a new Gmail is received, if it's from \"XXXX\", ask ChatGPT whether it's related to support. If it's a support issue, reply with \"Thank you for your email. We will get back to you within 2 hours\" and send a Slack message to the support channel."
			},
			"slackPrNotify": {
				"title": "Notify PR in Slack",
				"text": "On new PR in GitHub, send Slack message"
			},
			"slackChatBot": {
				"title": "Slack Chat Bot",
				"text": "Create a chat bot using chatGPT that the receives messages from a slack channel, the bot uses llm to answer user questions. The user can ask the bot to send email to someone, The bot shall use a Tool for sending an email (using Gmail). The user can ask to send slack message to a channel. There should be a tool for sending slack messages. Before sending an email verify you got from the user the recipient, subject and the body of the email. For Slack the user shall provide slack channel and message. Implement this as a long running agent where the chatGPT decides on what to do and when to use the tools."
			}
		},
		"aiPage": {
			"requiredMessage": "Please enter a message"
		}
	}
}
